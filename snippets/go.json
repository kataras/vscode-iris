{
	".source.go": {
		"single import": {
			"prefix": "im",
			"body": "import \"${1:package}\"",
			"description": "Snippet for import statement"
		},
		"multiple imports": {
			"prefix": "ims",
			"body": "import (\n\t\"${1:package}\"\n)",
			"description": "Snippet for a import block"
		},
		"single constant": {
			"prefix": "co",
			"body": "const ${1:name} = ${2:value}",
			"description": "Snippet for a constant"
		},
		"multiple constants": {
			"prefix": "cos",
			"body": "const (\n\t${1:name} = ${2:value}\n)",
			"description": "Snippet for a constant block"
		},
		"type function declaration": {
			"prefix": "tyf",
			"body": "type ${1:name} func($3) $4",
			"description": "Snippet for a type function declaration"
		},
		"type interface declaration": {
			"prefix": "tyi",
			"body": "type ${1:name} interface {\n\t$0\n}",
			"description": "Snippet for a type interface"
		},
		"type struct declaration": {
			"prefix": "tys",
			"body": "type ${1:name} struct {\n\t$0\n}",
			"description": "Snippet for a struct declaration"
		},
		"package main and main function": {
			"prefix": "pkgm",
			"body": "package main\n\nfunc main() {\n\t$0\n}",
			"description": "Snippet for main package & function"
		},
		"function declaration": {
			"prefix": "func",
			"body": "func $1($2) $3 {\n\t$0\n}",
			"description": "Snippet for function declaration"
		},
		"variable declaration": {
			"prefix": "var",
			"body": "var ${1:name} ${2:type}",
			"description": "Snippet for a variable"
		},
		"switch statement": {
			"prefix": "switch",
			"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
			"description": "Snippet for switch statement"
		},
		"select statement": {
			"prefix": "sel",
			"body": "select {\ncase ${1:condition}:\n\t$0\n}",
			"description": "Snippet for select statement"
		},
		"case clause": {
			"prefix": "cs",
			"body": "case ${1:condition}:$0",
			"description": "Snippet for case clause"
		},
		"for statement": {
			"prefix": "for",
			"body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
			"description": "Snippet for a for loop"
		},
		"for range statement": {
			"prefix": "forr",
			"body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
			"description": "Snippet for a for range loop"
		},
		"channel declaration": {
			"prefix": "ch",
			"body": "chan ${1:type}",
			"description": "Snippet for a channel"
		},
		"map declaration": {
			"prefix": "map",
			"body": "map[${1:type}]${2:type}",
			"description": "Snippet for a map"
		},
		"empty interface": {
			"prefix": "in",
			"body": "interface{}",
			"description": "Snippet for empty interface"
		},
		"if statement": {
			"prefix": "if",
			"body": "if ${1:condition} {\n\t$0\n}",
			"description": "Snippet for if statement"
		},
		"else branch": {
			"prefix": "el",
			"body": "else {\n\t$0\n}",
			"description": "Snippet for else branch"
		},
		"if else statement": {
			"prefix": "ie",
			"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
			"description": "Snippet for if else"
		},
		"if err != nil": {
			"prefix": "iferr",
			"body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
			"description": "Snippet for if err != nil"
		},
		"fmt.Println": {
			"prefix": "fp",
			"body": "fmt.Println(\"$1\")",
			"description": "Snippet for fmt.Println()"
		},
		"fmt.Printf": {
			"prefix": "ff",
			"body": "fmt.Printf(\"$1\", ${2:var})",
			"description": "Snippet for fmt.Printf()"
		},
		"log.Println": {
			"prefix": "lp",
			"body": "log.Println(\"$1\")",
			"description": "Snippet for log.Println()"
		},
		"log.Printf": {
			"prefix": "lf",
			"body": "log.Printf(\"$1\", ${2:var})",
			"description": "Snippet for log.Printf()"
		},
		"log variable content": {
			"prefix": "lv",
			"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for log.Printf() with variable content"
		},
		"t.Log": {
			"prefix": "tl",
			"body": "t.Log(\"$1\")",
			"description": "Snippet for t.Log()"
		},
		"t.Logf": {
			"prefix": "tlf",
			"body": "t.Logf(\"$1\", ${2:var})",
			"description": "Snippet for t.Logf()"
		},
		"t.Logf variable content": {
			"prefix": "tlv",
			"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for t.Logf() with variable content"
		},
		"make(...)": {
			"prefix": "make",
			"body": "make(${1:type}, ${2:0})",
			"description": "Snippet for make statement"
		},
		"new(...)": {
			"prefix": "new",
			"body": "new(${1:type})",
			"description": "Snippet for new statement"
		},
		"panic(...)": {
			"prefix": "pn",
			"body": "panic(\"$0\")",
			"description": "Snippet for panic"
		},
		"http ResponseWriter *Request": {
			"prefix": "wr",
			"body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
			"description": "Snippet for http Response"
		},
		"iris.Handler": {
			"prefix": "hf",
			"body": "func $1(ctx iris.Context) {\n\t$0\n}",
			"description": "Snippet for iris handler declaration"
		},
		"iris handler declaration": {
			"prefix": "hand",
			"body": "func $1(${2:ctx} iris.Context) {\n\t$0\n}",
			"description": "Snippet for iris handler declaration"
		},
		"iris.Context.Redirect": {
			"prefix": "rd",
			"body": "ctx.Redirect(\"${1:/}\", ${2:iris.StatusFound})",
			"description": "Snippet for Context.Redirect()"
		},
		"iris.Context.Error": {
			"prefix": "herr",
			"body": "ctx.StopWithError(${1:iris.StatusInternalServerError}, ${2:err}.Error())",
			"description": "Snippet for Context.StopWithError()"
		},
		"iris.Listen": {
			"prefix": "las",
			"body": "http.Listen(\"${1::8080}\")",
			"description": "Snippet for iris.Listen"
		},
		"iris.Run": {
			"prefix": "sv",
			"body": "app.Run(iris.Addr(\"${1::8080}\"))",
			"description": "Snippet for iris.Run"
		},
		"iris#New": {
			"prefix": "newapp",
			"body": "app := iris.New()\n$1\n\napp.Run(iris.Addr(\"${2::8080}\"))",
			"description": "Snippet for the iris#New"
		},
		"iris/sessions#New": {
			"prefix": "newsessions",
			"body": ["sessionsManager := sessions.New(sessions.Config{",
				"\tCookie: \"${1:cookieName}\",",
				"})\n$2"
			],
			"description": "Snippet for the iris/sessions#New"
		},
		"iris#RegisterView": {
			"prefix": "regview",
			"body": "app.RegisterView(iris.${1:HTML}(\"./${2:views}\", \".${3:html}\"))\n$4",
			"description": "Snippet for the iris#RegisterView"
		},
		"iris/core/router#HandleDir": {
			"prefix": "handledir",
			"body": "app.HandleDir(\"/${1:path}\", \"./${2:directory}\")\n$3",
			"description": "Snippet for the iris/core/router#HandleDir"
		},
		"iris/core/router#Favicon": {
			"prefix": "fav",
			"body": "app.Favicon(\"./${1:public/favicon.ico}\")\n$2",
			"description": "Snippet for the iris/core/router#Favicon"
		},
		"iris/core/router#Get": {
			"prefix": "get",
			"body": "app.Get(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
			"description": "Snippet for the iris/core/router#Get"
		},
		"iris/core/router#Post": {
			"prefix": "post",
			"body": "app.Post(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
			"description": "Snippet for the iris/core/router#Post"
		},
		"iris/core/router#Put": {
			"prefix": "put",
			"body": "app.Put(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
			"description": "Snippet for the iris/core/router#Put"
		},
		"iris/core/router#Delete": {
			"prefix": "delete",
			"body": "app.Delete(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
			"description": "Snippet for the iris/core/router#Delete"
		},
		"goroutine anonymous function": {
			"prefix": "go",
			"body": "go func($1) {\n\t$0\n}($2)",
			"description": "Snippet for anonymous goroutine declaration"
		},
		"goroutine function": {
			"prefix": "gf",
			"body": "go ${1:func}($0)",
			"description": "Snippet for goroutine declaration"
		},
		"defer statement": {
			"prefix": "df",
			"body": "defer ${1:func}($0)",
			"description": "Snippet for defer statement"
		},
		"test function": {
			"prefix": "tf",
			"body": "func Test$1(t *testing.T) {\n\t$0\n}",
			"description": "Snippet for Test function"
		},
		"test main": {
			"prefix": "tm",
			"body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
			"description": "Snippet for TestMain function"
		},
		"benchmark function": {
			"prefix": "bf",
			"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
			"description": "Snippet for Benchmark function"
		},
		"example function": {
			"prefix": "ef",
			"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
			"description": "Snippet for Example function"
		},
		"table driven test": {
			"prefix": "tdt",
			"body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
			"description": "Snippet for table driven test"
		},
		"init function": {
			"prefix": "finit",
			"body": "func init() {\n\t$1\n}",
			"description": "Snippet for init function"
		},
		"main function": {
			"prefix": "fmain",
			"body": "func main() {\n\t$1\n}",
			"description": "Snippet for main function"
		},
		"method declaration": {
			"prefix": "meth",
			"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
			"description": "Snippet for method declaration"
		},
		"hello world web app": {
			"prefix": "helloweb",
			"description": "Snippet for sample hello world webapp",
			"body": [
				"package main",
				"",
				"import (",
				"\t\"time\"",
				"",
				"\t\"github.com/kataras/iris/v12\"",
				")",
				"",
				"func greet(ctx iris.Context) {",
				"\tctx.Writef(\"Hello World! %s\", time.Now())",
				"}",
				"",
				"func main() {",
				"\tapp := iris.New()",
				"\tapp.Get(\"/\", greet)",
				"\tapp.Listen(\":8080\")",
				"}",
				""
			]
		},
		"sort implementation": {
			"prefix": "sort",
			"body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
			"description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
		}
	}
}