{
	"iris#New": {
		"prefix": "newapp",
		"body": "app := iris.New()\n$1\n\napp.Run(iris.Addr(\"${2::8080}\"))",
		"description": "Snippet for the iris#New"
	},
	"iris/sessions#New": {
		"prefix": "newsessions",
		"body": ["sessionsManager := sessions.New(sessions.Config{",
			"\tCookie: \"${1:cookieName}\",",
			"})\n$2"
		],
		"description": "Snippet for the iris/sessions#New"
	},
	"iris/websocket#New": {
		"prefix": "newwebsockets",
		"body": ["ws := websocket.New(websocket.Config{",
			"\tReadBufferSize:  2048,",
			"\tWriteBufferSize: 2048,",
			"})",
			"app.Any(\"/iris-ws.js\", websocket.ClientHandler())",
			"app.Get(\"/${1:endpoint}\", func(ctx iris.Context) {",
			"\tconn := ws.Upgrade(ctx)",
			"\tconn.OnDisconnect(func() {})",
			"\tconn.On(\"${2:event}\", func() {",
			"\t\t$3",
			"\t})",
			"})\n$4",
		],
		"description": "Snippet for the iris/websocket#New"
	},
	"iris#RegisterView": {
		"prefix": "regview",
		"body": "app.RegisterView(iris.${1:HTML}(\"./${2:views}\", \".${3:html}\"))\n$4",
		"description": "Snippet for the iris#RegisterView"
	},
	"iris/core/router#StaticWeb": {
		"prefix": "staticweb",
		"body": "app.StaticWeb(\"/${1:assets}\", \"./${2:public}\")\n$3",
		"description": "Snippet for the iris/router#StaticWeb"
	},
	"iris/core/router#StaticEmbedded": {
		"prefix": "staticembedded",
		"body": "app.StaticEmbedded(\"/${1:assets}\", \"./${2:public}\", Asset, AssetNames)\n$3",
		"description": "Snippet for the iris/core/router#StaticEmbedded"
	},
	"iris/core/router#Favicon": {
		"prefix": "fav",
		"body": "app.Favicon(\"./${1:public/favicon.ico}\")\n$2",
		"description": "Snippet for the iris/core/router#Favicon"
	},
	"iris#Handler": {
		"prefix": "hf",
		"body": "func(ctx iris.Context) {\n\t$1\n}\n$2",
		"description": "Snippet for the iris#Handler",
	},
	"iris/core/router#Handle": {
		"prefix": "handle",
		"body": "app.Handle(\"${1:GET}\", \"/${2:path}\", func(ctx iris.Context) {\n\t$3\n})\n$4",
		"description": "Snippet for the iris/core/router#Handle"
	},
	"iris/core/router#Get": {
		"prefix": "get",
		"body": "app.Get(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
		"description": "Snippet for the iris/core/router#Get"
	},
	"iris/core/router#Post": {
		"prefix": "post",
		"body": "app.Post(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
		"description": "Snippet for the iris/core/router#Post"
	},
	"iris/core/router#Put": {
		"prefix": "put",
		"body": "app.Put(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
		"description": "Snippet for the iris/core/router#Put"
	},
	"iris/core/router#Delete": {
		"prefix": "delete",
		"body": "app.Delete(\"/${1:path}\", func(ctx iris.Context) {\n\t$2\n})\n$3",
		"description": "Snippet for the iris/core/router#Delete"
	},
	"iris hello world web app": {
		"prefix": "helloweb",
		"body": "package main\n\nimport (\n\t\"time\"\n\n\t\"github.com/kataras/iris\"\n)\n\nfunc greet(ctx iris.Context) {\n\tctx.Writef(\"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\tapp := iris.New()\n\tapp.Get(\"/\", greet)\n\tapp.Run(iris.Addr(\":8080\"))\n}",
		"description": "Snippet for sample hello world iris webapp"
	}
	"single import": {
		"prefix": "im",
		"body": "import \"${1:package}\"",
		"description": "Snippet for import statement"
	},
	"multiple imports": {
		"prefix": "ims",
		"body": "import (\n\t\"${1:package}\"\n)",
		"description": "Snippet for a import block"
	},
	"single constant": {
		"prefix": "co",
		"body": "const ${1:name} = ${2:value}",
		"description": "Snippet for a constant"
	},
	"multiple constants": {
		"prefix": "cos",
		"body": "const (\n\t${1:name} = ${2:value}\n)",
		"description": "Snippet for a constant block"
	},
	"type interface declaration": {
		"prefix": "tyi",
		"body": "type ${1:name} interface {\n\t$0\n}",
		"description": "Snippet for a type interface"
	},
	"type struct declaration": {
		"prefix": "tys",
		"body": "type ${1:name} struct {\n\t$0\n}",
		"description": "Snippet for a struct declaration"
	},
	"package main and main function": {
		"prefix": "pkgm",
		"body": "package main\n\nfunc main() {\n\t$0\n}",
		"description": "Snippet for main package & function"
	},
	"function declaration": {
		"prefix": "func",
		"body": "func $1($2) $3 {\n\t$0\n}",
		"description": "Snippet for function declaration"
	},
	"variable declaration": {
		"prefix": "var",
		"body": "var ${1:name} ${2:type}",
		"description": "Snippet for a variable"
	},
	"switch statement": {
		"prefix": "switch",
		"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
		"description": "Snippet for switch statement"
	},
	"case clause": {
		"prefix": "cs",
		"body": "case ${1:condition}:$0",
		"description": "Snippet for case clause"
	},
	"for statement": {
		"prefix": "for",
		"body": "for ${1:index} := 0; $1 < ${2:count}; $1${3:++} {\n\t$0\n}",
		"description": "Snippet for a for loop"
	},
	"for range statement": {
		"prefix": "forr",
		"body": "for ${1:var} := range ${2:var} {\n\t$0\n}",
		"description": "Snippet for a for range loop"
	},
	"channel declaration": {
		"prefix": "ch",
		"body": "chan ${1:type}",
		"description": "Snippet for a channel"
	},
	"map declaration": {
		"prefix": "map",
		"body": "map[${1:type}]${2:type}",
		"description": "Snippet for a map"
	},
	"empty interface": {
		"prefix": "in",
		"body": "interface{}",
		"description": "Snippet for empty interface"
	},
	"if statement": {
		"prefix": "if",
		"body": "if ${1:condition} {\n\t$0\n}",
		"description": "Snippet for if statment"
	},
	"else branch": {
		"prefix": "el",
		"body": "else {\n\t$0\n}",
		"description": "Snippet for else branch"
	},
	"if else statement": {
		"prefix": "ie",
		"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
		"description": "Snippet for if else"
	},
	"if err != nil": {
		"prefix": "iferr",
		"body": "if err != nil {\n\t${1:return}\n}",
		"description": "Snippet for if err != nil"
	},
	"fmt.Println": {
		"prefix": "fp",
		"body": "fmt.Println(\"$1\")",
		"description": "Snippet for fmt.Println()"
	},
	"fmt.Printf": {
		"prefix": "ff",
		"body": "fmt.Printf(\"$1\", ${2:var})",
		"description": "Snippet for fmt.Printf()"
	},
	"log.Println": {
		"prefix": "lp",
		"body": "log.Println(\"$1\")",
		"description": "Snippet for log.Println()"
	},
	"log.Printf": {
		"prefix": "lf",
		"body": "log.Printf(\"$1\", ${2:var})",
		"description": "Snippet for log.Printf()"
	},
	"log variable content": {
		"prefix": "lv",
		"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
		"description": "Snippet for log.Printf() with variable content"
	},
	"t.Log": {
		"prefix": "tl",
		"body": "t.Log(\"$1\")",
		"description": "Snippet for t.Log()"
	},
	"t.Logf": {
		"prefix": "tlf",
		"body": "t.Logf(\"$1\", ${2:var})",
		"description": "Snippet for t.Logf()"
	},
	"t.Logf variable content": {
		"prefix": "tlv",
		"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
		"description": "Snippet for t.Logf() with variable content"
	},
	"make(...)": {
		"prefix": "make",
		"body": "make(${1:type}, ${2:0})",
		"description": "Snippet for make statement"
	},
	"new(...)": {
		"prefix": "new",
		"body": "new(${1:type})",
		"description": "Snippet for new statement"
	},
	"panic(...)": {
		"prefix": "pn",
		"body": "panic(\"$0\")",
		"description": "Snippet for panic"
	},
	"goroutine anonymous function": {
		"prefix": "go",
		"body": "go func($1) {\n\t$2\n}($0)",
		"description": "Snippet for anonymous goroutine declaration"
	},
	"goroutine function": {
		"prefix": "gf",
		"body": "go ${1:func}($0)",
		"description": "Snippet for goroutine declaration"
	},
	"defer statement": {
		"prefix": "df",
		"body": "defer ${1:func}($0)",
		"description": "Snippet for defer statement"
	},
	"test function": {
		"prefix": "tf",
		"body": "func Test$1(t *testing.T) {\n\t$0\n}",
		"description": "Snippet for Test function"
	},
	"benchmark function": {
		"prefix": "bf",
		"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
		"description": "Snippet for Benchmark function"
	},
	"example function": {
		"prefix": "ef",
		"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
		"description": "Snippet for Example function"
	},
	"table driven test": {
		"prefix": "tdt",
		"body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
		"description": "Snippet for table driven test"
	},
	"init function": {
		"prefix": "finit",
		"body": "func init() {\n\t$1\n}",
		"description": "Snippet for init function"
	},
	"main function": {
		"prefix": "fmain",
		"body": "func main() {\n\t$1\n}",
		"description": "Snippet for main function"
	},
	"method declaration": {
		"prefix": "meth",
		"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
		"description": "Snippet for method declaration"
	},
}